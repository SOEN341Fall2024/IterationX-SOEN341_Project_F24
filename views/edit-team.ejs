<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Team</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
  <style>
    .card-custom {
      border: 1px solid #ddd;
      padding: 20px;
      border-radius: 10px;
      background-color: #fff;
    }

    .student-checkbox {
      margin-right: 10px;
    }

    .btn-custom {
      background-color: #007bff;
      border: none;
      color: white;
      padding: 10px 20px;
      cursor: pointer;
    }

    .btn-remove {
      background-color: #dc3545;
      color: white;
      border: none;
      margin-left: 10px;
    }

    .btn-remove-all {
      background-color: #dc3545;
      color: white;
      border: none;
      margin-top: 10px 20px;
    }

    .student-list {
      max-height: 200px;
      overflow-y: auto;
    }

    /* Highlight for removed students */
    .student-removed {
      background-color: #f8d7da;
      color: #dc3545;
    }
  </style>
</head>
<body>
  <div class="container mt-5">
    <%
      // Mock Data for Testing
      const teams = [
        { id: 1, name: 'Team Alpha', members: [] },
        { id: 2, name: 'Team Bravo', members: [] },
        { id: 3, name: 'Team Charlie', members: [] }
      ];

      const availableStudents = [
        { id: 1, name: 'Kevin' }, 
        { id: 2, name: 'Joyal' }, 
        { id: 3, name: 'Aditi' },
        { id: 4, name: 'Owen' }, 
        { id: 5, name: 'Oussama' }, 
        { id: 6, name: 'Jonathan' },
        { id: 7, name: 'Emily' },
        { id: 8, name: 'Michael' },
        { id: 9, name: 'Sophia' },
        { id: 10, name: 'James' },
        { id: 11, name: 'Olivia' }
      ];

      // Store removed students to highlight in the available list
      let removedStudents = [];
      let newStudents = [];
    %>

    <div class="card card-custom">
      <h2 class="text-center mb-4">Edit Team</h2>

      <form id="editTeamForm">
        <div class="form-group">
          <label for="teamSelect">Select Team</label>
          <select id="teamSelect" name="team" class="form-control" onchange="switchTeam()">
            <% teams.forEach(function(team) { %>
              <option value="<%= team.id %>"><%= team.name %></option>
            <% }) %>
          </select>
        </div>

        <!-- Change Team Name -->
        <div class="form-group">
          <label for="teamName">Change Team Name</label>
          <input type="text" id="teamName" name="teamName" class="form-control">
        </div>

        <div class="row">
          <!-- Available Students List -->
          <div class="col-md-6">
            <h5>List of Students</h5>
            <input type="text" id="studentSearch" class="form-control mb-2" placeholder="Search for students">

            <ul id="studentList" class="list-group student-list">
              <% availableStudents.forEach(function(student) { %>
                <li class="list-group-item" id="studentItem_<%= student.id %>">
                  <input type="checkbox" id="student_<%= student.id %>" class="student-checkbox" name="students[]" value="<%= student.id %>">
                  <label for="student_<%= student.id %>"><%= student.name %></label>
                </li>
              <% }) %>
            </ul>
          </div>

          <!-- Current Team Members -->
<div class="col-md-6">
    <h5>Current Team Members</h5>
    <ul id="currentMembersList" class="list-group student-list"></ul>
    <button type="button" class="btn btn-remove-all btn-sm" onclick="removeAllMembers()">Remove All</button>
  
    <!-- New Students List & Button -->
    <h5 class="mt-3">New Students</h5>
    <ul id="newStudentsList" class="list-group student-list"></ul>
    <button type="button" class="btn btn-custom btn-sm mt-2" onclick="saveNewStudents()">Save New Students</button>
  </div>
        </div>

        <!-- Save Changes Button -->
        <div class="text-center mt-4">
          <button type="submit" class="btn btn-custom">Save Changes</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    let teams = <%- JSON.stringify(teams) %>;
    let availableStudents = <%- JSON.stringify(availableStudents) %>;
    let removedStudents = [];
    let newStudents = [];

    // Switch teams dynamically when team is selected
    function switchTeam() {
      let teamId = document.getElementById('teamSelect').value;
      let selectedTeam = teams.find(team => team.id == teamId);

      // Update team name
      document.getElementById('teamName').value = selectedTeam.name;

      // Clear current members and repopulate with new team's members
      let memberList = document.getElementById('currentMembersList');
      memberList.innerHTML = '';

      selectedTeam.members.forEach(member => {
        let li = document.createElement('li');
        li.classList.add('list-group-item');
        li.innerHTML = `${member.name} <button type="button" class="btn btn-remove btn-sm" onclick="removeMember(${member.id})">Remove</button>`;
        li.dataset.id = member.id;
        memberList.appendChild(li);
      });

      // Reset available students checkboxes and add event listeners for adding new students
      availableStudents.forEach(student => {
        let studentCheckbox = document.getElementById('student_' + student.id);
        studentCheckbox.checked = false;

        // Add event listener to the checkbox for adding new students
        studentCheckbox.addEventListener('change', function() {
          if (this.checked) {
            addNewStudent(student.id, student.name);
          } else {
            removeNewStudent(student.id);
          }
        });

        let studentItem = document.getElementById('studentItem_' + student.id);
        studentItem.classList.remove('student-removed');
        studentItem.querySelector('label').textContent = student.name; // Reset label text
      });

    }

    // Add a new student to the "New Students" list
    function addNewStudent(studentId, studentName) {
      // Check if student is already in the new students list
      if (!newStudents.includes(studentId)) {
        newStudents.push(studentId);

        // Add the student to the new students list
        let newStudentList = document.getElementById('newStudentsList');
        let li = document.createElement('li');
        li.classList.add('list-group-item');
        li.innerHTML = `${studentName} <button type="button" class="btn btn-remove btn-sm" onclick="removeNewStudent(${studentId})">Remove</button>`;
        li.dataset.id = studentId;
        newStudentList.appendChild(li);
      }
    }

    // Remove a student from the "New Students" list
    function removeNewStudent(studentId) {
      // Remove the student from the newStudents array
      newStudents = newStudents.filter(id => id !== studentId);

      // Remove the student from the DOM
      let studentElement = document.querySelector('#newStudentsList li[data-id="' + studentId + '"]');
      if (studentElement) {
        studentElement.remove();
      }

      // Uncheck the checkbox in the available students list
      let studentCheckbox = document.getElementById('student_' + studentId);
      if (studentCheckbox) {
        studentCheckbox.checked = false;
      }
    }

    // Save the new students to the team
    function saveNewStudents() {
      if (newStudents.length === 0) {
        alert('No new students to save.');
        return;
      }

      // Add new students to the current team list
      newStudents.forEach(studentId => {
        let studentName = document.querySelector(`#studentItem_${studentId} label`).textContent;
        addTeamMember(studentId, studentName);
      });

      // Clear the new students list and reset the array
      newStudents = [];
      document.getElementById('newStudentsList').innerHTML = '';
    }

    // Helper function to add a student to the current team list
    function addTeamMember(studentId, studentName) {
      let currentMembersList = document.getElementById('currentMembersList');
      let li = document.createElement('li');
      li.classList.add('list-group-item');
      li.innerHTML = `${studentName} <button type="button" class="btn btn-remove btn-sm" onclick="removeMember(${studentId})">Remove</button>`;
      li.dataset.id = studentId;
      currentMembersList.appendChild(li);
    }

    // Remove a single member
    function removeMember(memberId) {
      let memberElement = document.querySelector('#currentMembersList li[data-id="' + memberId + '"]');
      if (memberElement) {
        memberElement.remove();  // Remove member from current team list
        removedStudents.push(memberId);  // Store removed student
      }

      let studentCheckbox = document.getElementById('student_' + memberId);
      if (studentCheckbox) {
        studentCheckbox.checked = false;
      }
    }

    // Remove all members from the team
    function removeAllMembers() {
      let membersToRemove = Array.from(document.querySelectorAll('#currentMembersList li'));
      
      // Iterate over the members and remove them one by one
      membersToRemove.forEach(function(memberElement) {
        let memberId = memberElement.getAttribute('data-id');
        removeMember(memberId);
      });
    }

    // Search filter for students list
    document.getElementById('studentSearch').addEventListener('keyup', function() {
      let filter = this.value.toLowerCase();
      document.querySelectorAll('#studentList li').forEach(function(studentElement) {
        let studentName = studentElement.textContent.toLowerCase();
        if (studentName.indexOf(filter) > -1) {
          studentElement.style.display = '';
        } else {
          studentElement.style.display = 'none';
        }
      });
    });

    // Initialize page with first team
    document.addEventListener('DOMContentLoaded', switchTeam);
  </script>

</body>
</html>
