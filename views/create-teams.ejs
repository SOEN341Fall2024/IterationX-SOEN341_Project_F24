<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Team</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <!-- Include any additional CSS files here -->
  <style>
    /* Set Arial as the font for the entire body */
    body {
      font-family: Arial, sans-serif;
    }

    .large-font {
      font-size: 1.5rem; 
    }

    .heading-font {
      font-size: 3rem; 
    }

    .taller-box {
      min-height: 600px;
      padding: 3rem;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }

    .card {
      flex-grow: 1; 
      width: 100%; 
      padding: 5rem;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
    }

    .checkbox-group {
      max-height: 300px;
      overflow-y: auto;
      border: 1px solid #ccc;
      padding: 10px;
      background-color: white;
    }

    .form-label {
      font-size: 1.5rem; 
    }

    .checkbox-group label {
      font-size: 1.05rem; 
    }

    .btn-submit {
      padding: 2rem 4rem; 
      font-size: 2rem;
    }

    /* Styles for the confirmation message */
    #confirmationMessage {
      display: none;
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
      border-radius: 5px;
      padding: 10px;
      margin-top: 20px;
      text-align: center;
    }

    /* Styles for the error messages */
    .error-message {
      display: none;
      color: red;
      margin-top: 10px;
      text-align: left;
    }
  </style>
</head>
<body>
  <!-- Include the header -->
  <%- include('partials/header', { title: 'Create Team' }) %>

  <!-- Container to center the form vertically and horizontally -->
  <div class="container vh-100 d-flex justify-content-center align-items-center">
    <div class="row justify-content-center w-100">
      <div class="col-md-8">

        <!-- Card to create a grey box with rounded edges and taller height -->
        <div class="card bg-light rounded taller-box">
          <h2 class="text-center heading-font">Create Team</h2>
          <form id="createTeamForm" action="/create-teams" method="POST" enctype="multipart/form-data" class="large-font">

            <!-- Form group for team name input -->
            <div class="form-group">
              <label for="teamName" class="form-label">Team Name</label>
              <input type="text" class="form-control" name="teamname" id="teamName" placeholder="Enter team name" required>
              <div id="teamNameError" class="error-message" style="display: none; color: red;">Please provide a name for the team</div>
            </div>
          
            <!-- Form group for selecting a random number of students -->
            <div class="form-group">
              <div class="d-inline">
                <label for="teamNumber" class="form-label">Select</label>
                <input type="number" class="form-control d-inline w-25 ml-1 mr-2" id="teamNumber" placeholder="?" min="1">
                <label class="form-label d-inline">Random Students</label>
              </div>
              <button type="button" class="btn btn-secondary mt-2 d-inline mr-2" onclick="selectRandomStudents()">Select Random Students</button>
              <button type="button" class="btn btn-danger mt-2 d-inline" onclick="uncheckSelectedStudents()">Uncheck Selected Students</button>
              <div id="notEnoughStudentsError" class="error-message" style="display: none; color: red;">Not enough students</div>
            </div>
          
            <!-- Form group for selecting students -->
            <div class="form-group">
              <label for="students" class="form-label">List of Students (<span id="selectedCount">0</span> selected)</label>
              <input type="text" class="form-control mb-2" placeholder="Search for students" id="searchStudents" onkeyup="filterStudents()">
              <div id="checkboxGroup" class="checkbox-group">
                <% if (StudentArr && StudentArr.length > 0) { %>
                  <% StudentArr.forEach(function(student) { %>
                    <div>
                      <input type="checkbox" name="studentIDs" value="<%= student.id %>" id="student_<%= student.id %>" onclick="updateSelectedCount()">
                      <label for="student_<%= student.id %>"><%= student.name %></label>
                    </div>
                  <% }) %>
                <% } else { %>
                  <div>No students found</div>
                <% } %>
              </div>
              <div id="studentsError" class="error-message" style="display: none; color: red;">Please assign students to the team</div>
            </div>
          
            <!-- CSV upload option -->
            <div class="form-group">
              <label for="csvfile">Upload CSV File (Optional):</label>
              <input type="file" name="csvfile" id="csvfile" accept=".csv" />
            </div>
          
            <!-- Confirmation message -->
            <div id="confirmationMessage" style="display: none;">
              Team created successfully!
            </div>
          
            <!-- Submit button -->
            <button type="submit" class="btn btn-primary btn-block btn-submit mt-4">Create Teams</button>
          </form>          
        </div>
      </div>
    </div>
  </div>

  <!-- Include the footer -->
  <%- include('partials/footer') %>

  <script>
    // Function to filter students based on search input
    function filterStudents() {
      const searchInput = document.getElementById('searchStudents').value.toLowerCase();
      const checkboxes = document.getElementById('checkboxGroup').querySelectorAll('div');
      
      checkboxes.forEach(checkbox => {
        const label = checkbox.querySelector('label').innerText.toLowerCase();
        checkbox.style.display = label.includes(searchInput) ? '' : 'none';
      });
    }

    // Function to update the count of selected students
    function updateSelectedCount() {
      const selectedCount = document.querySelectorAll('#checkboxGroup input:checked').length;
      document.getElementById('selectedCount').innerText = selectedCount;
    }

    // Function to randomly select the specified number of students
    function selectRandomStudents() {
      const teamNumber = parseInt(document.getElementById('teamNumber').value, 10);
      const checkboxes = document.querySelectorAll('#checkboxGroup input');
      const uncheckedBoxes = Array.from(checkboxes);

      // Uncheck all students first
      uncheckedBoxes.forEach(box => box.checked = false);

      if (isNaN(teamNumber) || teamNumber < 1 || teamNumber > uncheckedBoxes.length) {
        document.getElementById('notEnoughStudentsError').style.display = 'block';
        return;
      } else {
        document.getElementById('notEnoughStudentsError').style.display = 'none';
      }

      // Shuffle the checkboxes and select the specified number of students
      uncheckedBoxes.sort(() => Math.random() - 0.5);
      uncheckedBoxes.slice(0, teamNumber).forEach(box => box.checked = true);

      // Update the selected count
      updateSelectedCount();
    }

    // Function to uncheck all selected students
    function uncheckSelectedStudents() {
      const checkboxes = document.querySelectorAll('#checkboxGroup input:checked');
      checkboxes.forEach(box => box.checked = false);

      // Update the selected count
      updateSelectedCount();
    }

    // Function to validate the form inputs
    function validateForm() {
      const teamName = document.getElementById('teamName').value;
      const checkedStudents = document.querySelectorAll('#checkboxGroup input:checked');
      const selectedStudents = Array.from(checkedStudents).map(input => input.value);

      // Check if team name is provided
      if (!teamName) {
        document.getElementById('teamNameError').style.display = 'block';
      } else {
        document.getElementById('teamNameError').style.display = 'none';
      }

      // Check if at least one student is selected
      if (selectedStudents.length === 0) {
        document.getElementById('studentsError').style.display = 'block';
      } else {
        document.getElementById('studentsError').style.display = 'none';
      }

      // If validation passes, show confirmation message
      if (teamName && selectedStudents.length > 0) {
        const confirmationMessage = document.getElementById('confirmationMessage');
        confirmationMessage.style.display = 'block';

        // Hide the message after 3 seconds
        setTimeout(() => {
          confirmationMessage.style.display = 'none';
        }, 3000);
      }
    }
  </script>
</body>
</html>